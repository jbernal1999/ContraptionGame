//Start menu
//import necessary packages with javaFX
import javafx.application.Application; 
import javafx.collections.ObservableList; 
import javafx.geometry.Orientation; 
import javafx.geometry.Pos; 
import javafx.scene.Scene; 
import javafx.scene.control.*;
import javafx.scene.canvas.*;
import javafx.scene.paint.*;
import javafx.scene.shape.Rectangle;
import javafx.scene.layout.*; 
import javafx.scene.text.TextAlignment;
import javafx.stage.Stage;
import java.awt.Component;
import javafx.geometry.*;
import javafx.animation.AnimationTimer;
import javafx.application.Application;
import javafx.event.EventHandler;
import javafx.scene.*;
import javafx.scene.image.*;
import javafx.scene.input.KeyEvent;
import javafx.scene.paint.Color;
import javafx.stage.Stage;
import javafx.scene.text.*;
import java.io.IOException;
import java.io.IOException;
import java.util.Scanner;
import java.net.*;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.io.*;
import java.util.*;
import java.lang.String;
import java.lang.Thread;

public class startMenu extends Application
{   
   
   Scanner scan = new Scanner(System.in);
  public static ArrayList<ArrayList<Integer>> gameBoard = new ArrayList<ArrayList<Integer>>();
  public static int locationX = 0;
  public static int locationY = 0;
  public static String levelChoice;
  public static int paneWidth;
  public static int paneHeight; 
  public static int insetTop; 
  public static int insetRight;
  public static int insetBottom;
  public static int insetLeft;
  public static int rows; 
  public static int columns; 
  public static int tileWidth;
  public static int tileHeight;
  public static int block;

    public static void main(String[] args)throws IOException, InterruptedException
   {
      
      
      launch(args);
      
      

   }
   
   private static final double W = 375, H = 450;
   boolean goUp, goDown, goRight, goLeft, inBounds;
   public Rectangle human;
   public AnimationTimer timer;
   
   //change stage name so there's no confusion
   Stage mainWindow;
   //create additional scene for level
   Scene level1;
   StackPane levelOne;
   
   public void start(Stage stage)
   {      
      //change stage name
      mainWindow = stage; 
       
      //create application window(pane)
      VBox window = new VBox(10);
      //set size of window
      window.setPrefSize(paneWidth, paneHeight);
      //set color
      window.setStyle("-fx-background-color:deepskyblue");
      
      
      //padding insets to center
      //insets = (top, right, bottom, left)
      //this may have to change? WILL IT EFFECT OTHER SCENE PADDINGS?
      window.setPadding(new Insets(30, 250, 30, 250));
      
      //add title - create label
      Label title = new Label("STUDENT DROPOUT:)");
      //add title to window
      window.getChildren().addAll(title);
      title.setTextAlignment(TextAlignment.CENTER);
      title.setPadding(new Insets(20,0,10,0));
      //set title font
      title.setFont(Font.font("Impact", FontWeight.BOLD, FontPosture.REGULAR, 12));
      
      //create buttons
      String startString = "START BUTTON";
      Button startButton = new Button(startString);
      //this button will have to hold some sort of memory, right?
      Button loadButton = new Button("LOAD GAME");
      
      //set size of buttons
      startButton.setMinWidth(125);
      startButton.setMinHeight(50);
      loadButton.setMinWidth(125);
      loadButton.setMinHeight(50);
      
      startButton.setStyle("-fx-text-fill: black");
      loadButton.setStyle("-fx-text-fill: black");
      
      //startButton.setTextAlignment(TextAlignment.CENTER);
      //loadButton.setTextAlignment(TextAlignment.CENTER);
      startButton.setAlignment(Pos.CENTER);
      loadButton.setAlignment(Pos.CENTER);
      window.getChildren().add(startButton);
      window.getChildren().add(loadButton);
      
      //window.setHgap(10);
      
      Scene startPage = new Scene(window, paneWidth, paneHeight);
      
      //starting game
      
      boolean win = false; 
      boolean sceneWin = false;
      int sceneCount = 0;
      
      do
      {
         do
         {
            switch(sceneCount)
            {
               case 0: 
                  try
                  {
                     Scanner scan = new Scanner(new File("level1.txt")); //read from file
           
                     paneWidth = scan.nextInt();
                     paneHeight = scan.nextInt();
                     insetTop = scan.nextInt();
                     insetRight = scan.nextInt();
                     insetBottom = scan.nextInt();
                     insetLeft = scan.nextInt();
                     rows = scan.nextInt();
                     columns = scan.nextInt();
                     tileWidth = scan.nextInt();
                     tileHeight = scan.nextInt();
               
                     for(int i=0; i<rows; i++)
                     {
                       ArrayList<Integer> inside = new ArrayList<Integer>();
                       gameBoard.add(inside);
                     }
                     
                     //for loop to add the ints to the inner ArrayLists
                     for(int i=0; i<rows; i++)
                     {
                       for(int j=0; j<columns; j++)
                       {
                         gameBoard.get(i).add(scan.nextInt());
                       }
                     }    
                     
                     human = new Rectangle(10,10);
                     human.setFill(Color.TURQUOISE);
                     human.setStroke(Color.TURQUOISE);
                     human.setArcHeight(10);
                     human.setArcWidth(10);
                     moveHeroTo(W / 2, H / 2);
                     //set inBounds to true since we are in the middle of pane
                     inBounds = true;
                
                     //level 1 layout - create new pane
                     levelOne = new StackPane();
                     levelOne.setPrefSize(W, H);
                     //insets(top, right, bottom, left)
                     levelOne.setPadding(new Insets(110,0,0,110));
                     //levelOne.setPrefSize(W, H);
                     
                     
                     resetBoard();
                        
                     levelOne.setAlignment(Pos.CENTER);
                     
                     Group levelUno = new Group();
                     levelUno.getChildren().add(0,levelOne);
                     levelUno.getChildren().add(human);
                          
                     level1 = new Scene(levelUno, W, H, Color.BLUE);
                     
                     level1.setOnKeyPressed(new EventHandler<KeyEvent>() 
                     {
                           public void handle(KeyEvent event) 
                           {
                               switch (event.getCode()) 
                               {
                                   case UP:    goUp = true;
                                   //System.out.println("UP pressed");
                                   System.out.println("X: " + human.getLocalToParentTransform().getTx() + "\tY: " + human.getLocalToParentTransform().getTy());
                                   break;
                                   
                                   case DOWN:  goDown = true;
                                   //System.out.println("DONW pressed");
                                   System.out.println("X: " + human.getLocalToSceneTransform().getTx() + "\tY: " + human.getLocalToSceneTransform().getTy());
                                   break;
                                   
                                   case LEFT:  goLeft  = true; 
                                   //System.out.println("LEFT pressed");
                                   System.out.println("X: " + human.getLocalToSceneTransform().getTx() + "\tY: " + human.getLocalToSceneTransform().getTy());
                                   break;
                                   
                                   case RIGHT: goRight  = true;
                                   //System.out.println("RIGHT pressed");
                                   System.out.println("X: " + human.getLocalToSceneTransform().getTx() + "\tY: " + human.getLocalToSceneTransform().getTy());
                                   break;
                                   
                               }
                           }
                       });
               
                       level1.setOnKeyReleased(new EventHandler<KeyEvent>() 
                       {
                           public void handle(KeyEvent event) 
                           {
                               switch (event.getCode()) 
                               {
                                   case UP:    goUp = false;
                                   //System.out.println("UP released");
                                   break;
                                   case DOWN:  goDown = false;
                                   //System.out.println("DOWN released");
                                   break;
                                   case LEFT:  goLeft  = false;
                                   //System.out.println("LEFT released");
                                   break;
                                   case RIGHT: goRight  = false;
                                   //System.out.println("RIGHT released");
                                   break;
                               }
                           }
                       });
                       
                       stage.setScene(level1);
                       stage.setTitle("LEVEL ONE");
                       stage.show();
                     
                       timer = new AnimationTimer() 
                       {   
                           public void handle(long now) 
                           {
                               int dx = 0, dy = 0;
               
                               if (goUp) dy -= 3;
                               if (goDown) dy += 3;
                               if (goLeft)  dx -= 3;
                               if (goRight)  dx += 3;
               
                               moveHeroBy(dx, dy);
                               //testing boundaries
                               /*if((human.getLocalToParentTransform().getTx() < 26) || (human.getLocalToParentTransform().getTy() < 74) ||
                                 (human.getLocalToParentTransform().getTx() > 617) || (human.getLocalToParentTransform().getTy() > 566))
                               {
                                 
                               }*/
                               //if too far left                
                               if(human.getLocalToParentTransform().getTx() < 75)
                               {
                                 human.relocate(75.0, (human.getLocalToParentTransform().getTy()));
                               }
                               //if too far up
                               if(human.getLocalToParentTransform().getTy() < 75)
                               {
                                 human.relocate((human.getLocalToParentTransform().getTx()), 75.0);
                               }
                               //too far right
                               if(human.getLocalToParentTransform().getTx() > 290)
                               {
                                 human.relocate(290.0, (human.getLocalToParentTransform().getTy()));
                               }
                               //too far down
                               if(human.getLocalToParentTransform().getTy() > 439)
                               {
                                 human.relocate((human.getLocalToParentTransform().getTx()), 439.0);
                               }
                              
                           }
                       };
                       timer.start();
                       
                       //set action on start button -> (from scene to scene)
                       startButton.setOnAction(e -> mainWindow.setScene(level1));
                       //show everything
                       mainWindow.setScene(startPage);
                       mainWindow.setTitle("START MENU");
                       mainWindow.show();

                             
                  }catch(FileNotFoundException fnfe) //catch if the file does not exist
                  {
                     System.out.println("File does not exist!");
                  }
                  break;
               case 1: 
                  break;
               case 2: 
                  break;
               case 3: 
                  break;
            }
         }while(sceneWin != false);
            
      }while(win != false);
               
            
   }
   
   private void moveHeroBy(int dx, int dy) 
   {
        if (dx == 0 && dy == 0) return;

        final double cx = human.getBoundsInLocal().getWidth()  / 2;
        final double cy = human.getBoundsInLocal().getHeight() / 2;
        

        double x = cx + human.getLayoutX() + dx;
        double y = cy + human.getLayoutY() + dy;

        moveHeroTo(x, y);
    }
    private void moveHeroTo(double x, double y) 
    {
        final double cx = human.getBoundsInLocal().getWidth()  / 2;
        final double cy = human.getBoundsInLocal().getHeight() / 2;

        if (x - cx >= 0 &&
            x + cx <= W &&
            y - cy >= 0 &&
            y + cy <= H) {
            human.relocate(x - cx, y - cy);
        }
    }
    
    
    private void clearBoard()
    {
      //levelOne.getChildren().removeAll(tiles);
    }
    
    private void resetBoard()
    {
      int locationX = -205;
      int locationY = -242;
      int count = 1;      
      Rectangle tiles;
      //initalize tileboard
      
     
      for(int i=0; i<rows; i++)
      {
         for(int j=0; j<columns; j++)
         {
            tiles = new Rectangle();
            tiles.setWidth(tileWidth);
            tiles.setHeight(tileHeight);
          
            if(gameBoard.get(i).get(j) == 0)
            {
               tiles.setFill(Color.BLACK);
               tiles.setStroke(Color.BLACK);
               tiles.setTranslateX(locationX);
               tiles.setTranslateY(locationY);
               locationX = locationX+75;           
               levelOne.getChildren().add(tiles);
            }
             
           if(gameBoard.get(i).get(j) == 1)
           {
               tiles.setFill(Color.WHITE);
               tiles.setStroke(Color.WHITE);
               tiles.setTranslateX(locationX);
               tiles.setTranslateY(locationY);
               locationX = locationX+75;           
               levelOne.getChildren().add(tiles);
           }
           
           if(gameBoard.get(i).get(j) == 3)
           {
               tiles.setFill(Color.GREEN);
               tiles.setStroke(Color.GREEN);
               tiles.setTranslateX(locationX);
               tiles.setTranslateY(locationY);
               locationX = locationX+75;           
               levelOne.getChildren().add(tiles);
           }
         } 
         locationX = -205;
         locationY = locationY + 75;
     }
    }

    

}
