//Start menu
//import necessary packages with javaFX
import javafx.application.Application; 
import javafx.collections.ObservableList; 
import javafx.geometry.Orientation; 
import javafx.geometry.Pos; 
import javafx.scene.Scene; 
import javafx.scene.control.*;
import javafx.scene.canvas.*;
import javafx.scene.paint.*;
import javafx.scene.shape.Rectangle;
import javafx.scene.layout.*; 
import javafx.scene.text.TextAlignment;
import javafx.stage.Stage;
import java.awt.Component;
import javafx.geometry.*;
import javafx.animation.AnimationTimer;
import javafx.application.Application;
import javafx.event.EventHandler;
import javafx.scene.*;
import javafx.scene.image.*;
import javafx.scene.input.KeyEvent;
import javafx.scene.paint.Color;
import javafx.stage.Stage;
import javafx.scene.text.*;
import java.io.IOException;
import java.io.IOException;
import java.util.Scanner;
import java.net.*;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.io.*;
import java.util.*;
import java.lang.String;
import java.lang.Thread;
import javafx.scene.control.ContextMenu;
import javafx.scene.control.MenuItem;
import javafx.scene.image.ImageView;
import javafx.scene.control.Menu;
import javafx.scene.control.SeparatorMenuItem;

public class startMenu extends Application
{   
   
   Scanner scan = new Scanner(System.in);
  public static ArrayList<ArrayList<Integer>> gameBoard = new ArrayList<ArrayList<Integer>>();
  public static int locationX = 0;
  public static int locationY = 0;
  public static String levelChoice;
  public static int paneWidth;
  public static int paneHeight; 
  public static int insetTop; 
  public static int insetRight;
  public static int insetBottom;
  public static int insetLeft;
  public static int rows; 
  public static int columns; 
  public static int tileWidth;
  public static int tileHeight;
  public static int block;

    public static void main(String[] args)throws IOException, InterruptedException
   {
      String newFile;
      ArrayList<String> levels = new ArrayList<String>();
      levels.add("level1.txt");
      levels.add("level2.txt");
      levels.add("level3.txt");
      levels.add("level4.txt");

      try{
            newFile = "level1.txt";
            Scanner scan = new Scanner(new File(newFile)); //read from file
           
               paneWidth = scan.nextInt();
               paneHeight = scan.nextInt();
               insetTop = scan.nextInt();
               insetRight = scan.nextInt();
               insetBottom = scan.nextInt();
               insetLeft = scan.nextInt();
               rows = scan.nextInt();
               columns = scan.nextInt();
               tileWidth = scan.nextInt();
               tileHeight = scan.nextInt();
               
               for(int i=0; i<rows; i++)
               {
                 ArrayList<Integer> inside = new ArrayList<Integer>();
                 gameBoard.add(inside);
               }
               
               //for loop to add the ints to the inner ArrayLists
               for(int i=0; i<rows; i++)
               {
                 for(int j=0; j<columns; j++)
                 {
                   gameBoard.get(i).add(scan.nextInt());
                 }
               }             

      }catch(FileNotFoundException fnfe) //catch if the file does not exist
      {
         System.out.println("File does not exist!");
      }
      
      
      launch(args);
      
      

   }
   
   private static final double W = 600, H = 600;
   boolean goUp, goDown, goRight, goLeft, inBounds;
   public Rectangle human;
   public AnimationTimer timer;
   
   
   //change stage name so there's no confusion
   Stage mainWindow;
   //create additional scene for level
   Scene level1, level2, level3, level4;
   
   public void start(Stage stage)
   {  
      //change stage name
      mainWindow = stage; 
       
      //create application window(pane)
      VBox window = new VBox(10);
      //set size of window
      window.setPrefSize(paneWidth, paneHeight);
      //set color
      window.setStyle("-fx-background-color:deepskyblue");
      
      
      //padding insets to center
      //insets = (top, right, bottom, left)
      //this may have to change? WILL IT EFFECT OTHER SCENE PADDINGS?
      window.setPadding(new Insets(30, 250, 30, 250));
      
      //add title - create label
      Label title = new Label("STUDENT DROPOUT:)");
      //add title to window
      window.getChildren().addAll(title);
      title.setTextAlignment(TextAlignment.CENTER);
      title.setPadding(new Insets(20,0,10,0));
      //set title font
      title.setFont(Font.font("Impact", FontWeight.BOLD, FontPosture.REGULAR, 12));
      
      //create buttons
      String startString = "START BUTTON";
      Button startButton = new Button(startString);
      //this button will have to hold some sort of memory, right?
      Button loadButton = new Button("LOAD GAME");
      
      //set size of buttons
      startButton.setMinWidth(125);
      startButton.setMinHeight(50);
      loadButton.setMinWidth(125);
      loadButton.setMinHeight(50);
      
      startButton.setStyle("-fx-text-fill: black");
      loadButton.setStyle("-fx-text-fill: black");
      
      //startButton.setTextAlignment(TextAlignment.CENTER);
      //loadButton.setTextAlignment(TextAlignment.CENTER);
      startButton.setAlignment(Pos.CENTER);
      loadButton.setAlignment(Pos.CENTER);
      window.getChildren().add(startButton);
      window.getChildren().add(loadButton);
      
      //window.setHgap(10);
      
      Scene startPage = new Scene(window, paneWidth, paneHeight);
      
      
      human = new Rectangle(10,10);
      human.setArcHeight(10);
      human.setArcWidth(10);
      moveHeroTo(W / 2, H / 2);
      //set inBounds to true since we are in the middle of pane
      inBounds = true;
 
      //level 1 layout - create new pane
      StackPane levelOne = new StackPane();
      levelOne.setPrefSize(W, H);
      //insets(top, right, bottom, left)
      levelOne.setPadding(new Insets(110,0,0,110));
      //levelOne.setPrefSize(W, H);
      
      //declare tileboard
      //Rectangle[][] tiles;
      //int rows = 6;
      //int columns = 5;
      int locationX = -205;
      int locationY = -285;
      int count = 1;      
      Rectangle tiles;
      //initalize tileboard
      
     
      for(int i=0; i<rows; i++)
    {
      for(int j=0; j<columns; j++)
      {
        tiles = new Rectangle();
        tiles.setWidth(tileWidth);
        tiles.setHeight(tileHeight);
          
        if(gameBoard.get(i).get(j) == 0)
        {
            tiles.setFill(Color.BLACK);
            tiles.setStroke(Color.BLACK);
            tiles.setTranslateX(locationX);
            tiles.setTranslateY(locationY);
            locationX = locationX+75;           
            levelOne.getChildren().add(tiles);
        }
             
        if(gameBoard.get(i).get(j) == 1)
        {
            tiles.setFill(Color.WHITE);
            tiles.setStroke(Color.WHITE);
            tiles.setTranslateX(locationX);
            tiles.setTranslateY(locationY);
            locationX = locationX+75;           
            levelOne.getChildren().add(tiles);
        }
      } 
      locationX = -205;
      locationY = locationY + 75;
    }

      
      
      
      
      /*for(int i = 0; i < 30; i++)
      {     
      player = new Rectangle();
      
      if(i % 5 == 0)
         {
            locationX = -205;
            locationY = locationY + 75;
            player.setTranslateY(locationY);
         }    
            
            player.setWidth(75);
            player.setHeight(75);
            player.setFill(Color.RED);
            player.setStroke(Color.BLACK);
            player.setTranslateX(locationX);
            player.setTranslateY(locationY);
            //locationY = locationY-75;
            locationX = locationX+75;
            
            levelOne.getChildren().add(player);
            //System.out.println(tiles[i][j]);  
            
           

            
      }
      
      int jukeBoxLocationX = 31;
      int jukeBoxLocationY = -25;
      Rectangle jukebox = new Rectangle(50,90);
      jukebox.setTranslateX(jukeBoxLocationX);
      jukebox.setTranslateY(jukeBoxLocationY);
      jukebox.setFill(Color.TURQUOISE);
      levelOne.getChildren().add(jukebox);*/


      levelOne.setAlignment(Pos.CENTER);
      
      Group levelUno = new Group();
      levelUno.getChildren().add(0,levelOne);
      levelUno.getChildren().add(human);
      //System.out.println(levelUno.getChildren());
      
      //create new rectangle for raised area
      //Rectangle shelf = new Rectangle(125,600);
      //shelf.setFill(Color.GREY);
      //levelOne.getChildren().add(1,shelf);
     
      
      //level1 = new Scene(levelOne, paneWidth, paneHeight);
      
      level1 = new Scene(levelUno, W, H, Color.BLUE);
      
      //Creating the drop down menu
      ContextMenu contextMenu = new ContextMenu();
      MenuItem menuItemAbout = new MenuItem("About...");
      
      //Creating a menu inside the menu
      Menu Restart = new Menu("Restart...");
      
      //Creating menu items for restart sub menu
      MenuItem Area = new MenuItem("Area");
      MenuItem Level = new MenuItem("Level");
      
      //Adding sub items to restart
      Restart.getItems().addAll(Area, Level);
      
      //Adding the rest of the items to our context menu
      MenuItem menuItemSave = new MenuItem("Save Game");
      MenuItem menuItemLoad = new MenuItem("Load Game");
      MenuItem menuItemQuit = new MenuItem("Quit");
      
      //Creating a separator
      SeparatorMenuItem sep = new SeparatorMenuItem();
      contextMenu.getItems().addAll(menuItemAbout, Restart, menuItemSave, menuItemLoad, sep, menuItemQuit);      

      //Drop down menu prints statments to make sure we reach each button... 
      //this is where we'll add code for each button
         
         menuItemAbout.setOnAction(e -> System.out.println("About"));
         //Restart.setOnAction(e -> System.out.println("Restart"));
         Area.setOnAction(e -> System.out.println("Area"));
         Level.setOnAction(e -> System.out.println("Level"));
         menuItemSave.setOnAction(e -> System.out.println("Save Game"));
         menuItemLoad.setOnAction(e -> System.out.println("Load Game"));
         menuItemQuit.setOnAction(e -> System.exit(0));    
      
      level1.setOnKeyPressed(new EventHandler<KeyEvent>() 
      {
            public void handle(KeyEvent event) 
            {
                switch (event.getCode()) 
                {
                    case UP:    goUp = true;
                    //System.out.println("UP pressed");
                    System.out.println("X: " + human.getLocalToParentTransform().getTx() + "\tY: " + human.getLocalToParentTransform().getTy());
                    break;
                    
                    case DOWN:  goDown = true;
                    //System.out.println("DONW pressed");
                    System.out.println("X: " + human.getLocalToSceneTransform().getTx() + "\tY: " + human.getLocalToSceneTransform().getTy());
                    break;
                    
                    case LEFT:  goLeft  = true; 
                    //System.out.println("LEFT pressed");
                    System.out.println("X: " + human.getLocalToSceneTransform().getTx() + "\tY: " + human.getLocalToSceneTransform().getTy());
                    break;
                    
                    case RIGHT: goRight  = true;
                    //System.out.println("RIGHT pressed");
                    System.out.println("X: " + human.getLocalToSceneTransform().getTx() + "\tY: " + human.getLocalToSceneTransform().getTy());
                    break;
                    
                    case ESCAPE: 
                    //making sure we made it here                   
                    System.out.println("ESC pressed");
                    
                    //Prints out the context menu
                    contextMenu.show(levelOne, 28, 76);                    
                    break;
                    
                }
            }
        });

        level1.setOnKeyReleased(new EventHandler<KeyEvent>() 
      {
            public void handle(KeyEvent event) 
            {
                switch (event.getCode()) 
                {
                    case UP:    goUp = false;
                    //System.out.println("UP released");
                    break;
                    case DOWN:  goDown = false;
                    //System.out.println("DOWN released");
                    break;
                    case LEFT:  goLeft  = false;
                    //System.out.println("LEFT released");
                    break;
                    case RIGHT: goRight  = false;
                    //System.out.println("RIGHT released");
                    break;
                }
            }
        });
        
      stage.setScene(level1);
      stage.setTitle("LEVEL ONE");
      stage.show();
      
      timer = new AnimationTimer() 
      {
            
            public void handle(long now) 
            {
                int dx = 0, dy = 0;

                if (goUp) dy -= 3;
                if (goDown) dy += 3;
                if (goLeft)  dx -= 3;
                if (goRight)  dx += 3;

                moveHeroBy(dx, dy);
                //testing boundaries
                /*if((human.getLocalToParentTransform().getTx() < 26) || (human.getLocalToParentTransform().getTy() < 74) ||
                  (human.getLocalToParentTransform().getTx() > 617) || (human.getLocalToParentTransform().getTy() > 566))
                {
                  
                }*/
                //if too far left                
                if(human.getLocalToParentTransform().getTx() < 111)
                {
                  human.relocate(111.0, (human.getLocalToParentTransform().getTy()));
                }
                //if too far up
                if(human.getLocalToParentTransform().getTy() < 110)
                {
                  human.relocate((human.getLocalToParentTransform().getTx()), 110.0);
                }
                //too far right
                if(human.getLocalToParentTransform().getTx() > 402)
                {
                  human.relocate(402.0, (human.getLocalToParentTransform().getTy()));
                }
                //too far down
                if(human.getLocalToParentTransform().getTy() > 547)
                {
                  human.relocate((human.getLocalToParentTransform().getTx()), 547.0);
                }
               
            }
        };
        timer.start();
        
        
        
            
       //set action on start button -> (from scene to scene)
      startButton.setOnAction(e -> mainWindow.setScene(level1));
      //show everything
      mainWindow.setScene(startPage);
      mainWindow.setTitle("START MENU");
      mainWindow.show();
      
   }
   
   private void moveHeroBy(int dx, int dy) 
   {
        if (dx == 0 && dy == 0) return;

        final double cx = human.getBoundsInLocal().getWidth()  / 2;
        final double cy = human.getBoundsInLocal().getHeight() / 2;
        

        double x = cx + human.getLayoutX() + dx;
        double y = cy + human.getLayoutY() + dy;

        moveHeroTo(x, y);
    }
    private void moveHeroTo(double x, double y) 
    {
        final double cx = human.getBoundsInLocal().getWidth()  / 2;
        final double cy = human.getBoundsInLocal().getHeight() / 2;

        if (x - cx >= 0 &&
            x + cx <= W &&
            y - cy >= 0 &&
            y + cy <= H) {
            human.relocate(x - cx, y - cy);
        }
    }
    


    

}
